(*---------------------------------------------------------------------------
    Copyright 2013 Microsoft

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.                                                      

    File: 
        serviceCSharp.fs
  
    Description: 
        CSharp API for Service

    Author:																	
        Jin Li, Principal Researcher
        Microsoft Research, One Microsoft Way
        Email: jinl at microsoft dot com
    Date:
        Jul. 2015
    
 ---------------------------------------------------------------------------*)
namespace Prajna.Service.CSharp

open System
open Prajna.Core
open Prajna.Service

/// <summary>
/// Launching a PrajnaInstance on a group of remote nodes.
/// serviceName: name of the serivce
/// param: parameter to be called by OnStart
/// serviceInstance: OnStart(param), OnStop(), Run(), IsRunning() call for the initiating of the service. 
///         You must derive serviceInstance from WorkerRoleInstance
/// PrajnaInstance share similar characteristics with Prajnaservice, with characteristics below.
/// 1. You can run Service on Azure VM or your own cluster in the data center. 
/// 2. You can host multiple worker role in a same remote program. 
/// 3. Service can interact (call each other) with each call being a function call. 
/// 4. You can perform Big data analytical tasks (map/filter/choose/collect, fold, map-reduce, sort, hash-join, cross-join, etc.) on data generated by Service
/// 5. You can start Service with a parameter. 
/// 6. You can track debug output (log, stderr, stdout) of the remote service. 
/// But in addition, PrajnaInstance is 
/// 1. Initialied remotely (with a function that you have specified). As such, PrajnaInstance doesn't need to be serializable, and can contain heavy data element. 
/// 2. You may specify the number of thread to work on the PrajnaInstance (parameter specified in Start Parameter. 
/// </summary>
type RemoteInstance() = 
    /// <summary>
    /// Launching Prajna Service on a group of remote nodes.
    /// serviceName: name of the serivce
    /// param: parameter to be called by OnStart, must derive from WorkerRoleInstanceStartParam
    /// func: the function to initialized the WorkerRoleInstance. This function will be executed as a closure remotely. The returned class must derive from WorkerRoleInstance.
    /// </summary>
    static member Start<'StartParamType, 'RType 
                                                    when 'StartParamType :> WorkerRoleInstanceStartParam
                                                        and 'RType :> WorkerRoleInstance > ( cl, serviceName, (param:'StartParamType), func:Func<'RType> )  =
        RemoteInstance.InternalStartInstanceOnClusterWithParam cl serviceName param func.Invoke
    /// <summary>
    /// Launching Prajna Service on a group of remote nodes.
    /// serviceName: name of the serivce
    /// param: parameter to be called by OnStart, must derive from WorkerRoleInstanceStartParam
    /// func: the function to initialized the WorkerRoleInstance. This function will be executed as a closure remotely. The returned class must derive from WorkerRoleInstance.
    /// </summary>
    static member Start<'StartParamType, 'RType 
                                                    when 'StartParamType :> WorkerRoleInstanceStartParam
                                                        and 'RType :> WorkerRoleInstance > (serviceName, param:'StartParamType, func:Func<'RType> )  =
        RemoteInstance.InternalStartInstanceOnClusterWithParam null serviceName param func.Invoke

    /// <summary>
    /// Launching Prajna Service on a group of remote nodes.
    /// serviceName: name of the serivce
    /// param: parameter to be called by OnStart, must derive from WorkerRoleInstanceStartParam
    /// func: the function to initialized the WorkerRoleInstance. This function will be executed as a closure remotely. The returned class must derive from WorkerRoleInstance.
    /// </summary>
    static member Start<'RType when 'RType :> WorkerRoleInstance > (serviceName, func:Func<'RType> )  =
        let param = WorkerRoleInstanceStartParam()
        RemoteInstance.InternalStartInstanceOnClusterWithParam<_,'RType> null serviceName param func.Invoke
    /// <summary>
    /// Launching Prajna Instance locally, mainly for debuging purposes. 
    /// serviceName: name of the serivce
    /// param: parameter to be called by OnStart, must derive from WorkerRoleInstanceStartParam
    /// func: the function to initialized the WorkerRoleInstance. This function will be executed as a closure remotely. The returned class must derive from WorkerRoleInstance.
    /// Return: toStop (a function can be called to terminate the current RoleInstance). 
    ///         isRunning ( a Func that can be called to evaluate if the current RoleInstance is still running)
    /// </summary>
    static member StartLocal<'StartParamType, 'RType 
                                                    when 'StartParamType :> WorkerRoleInstanceStartParam
                                                        and 'RType :> WorkerRoleInstance >
                                                        (serviceName, param:'StartParamType, func:Func<'RType>)  =
        RemoteInstance.InternalStartLocalInstanceWithParam serviceName param func.Invoke
    /// <summary>
    /// Launching Prajna Service on a group of remote nodes.
    /// serviceName: name of the serivce
    /// param: parameter to be called by OnStart, must derive from WorkerRoleInstanceStartParam
    /// func: the function to initialized the WorkerRoleInstance. This function will be executed as a closure remotely. The returned class must derive from WorkerRoleInstance.
    /// Return: toStop (a function can be called to terminate the current RoleInstance). 
    ///         isRunning ( a Func that can be called to evaluate if the current RoleInstance is still running)
    /// </summary>
    static member StartLocal<'RType when 'RType :> WorkerRoleInstance > (serviceName, func:Func<'RType> )  =
        let param = WorkerRoleInstanceStartParam()
        RemoteInstance.InternalStartLocalInstanceWithParam serviceName param func.Invoke        
    /// Stop a local instance
    static member StopLocal serviceName = 
        RemoteInstance.InternalStopInstance serviceName
    /// Is a local instance still running
    static member IsRunningLocal serviceName = 
        RemoteInstance.InternalIsRunningLocalInstance serviceName
    /// <summary>
    /// Launching Prajna Service on a group of remote nodes.
    /// serviceName: name of the serivce
    /// serverInfo: information of the server 
    /// param: parameter to be called by OnStart, must derive from WorkerRoleInstanceStartParam
    /// func: the function to initialized the WorkerRoleInstance. This function will be executed as a closure remotely. The returned class must derive from WorkerRoleInstance.
    /// </summary>
    static member Start<'StartParamType, 'RType 
                    when 'StartParamType :> WorkerRoleInstanceStartParam 
                    and 'RType :> WorkerRoleInstance > (serverInfo:ContractServersInfo, serviceName, param:'StartParamType, func: Func<'RType> )  =
        RemoteInstance.InternalStartInstanceOnServersWithParam<_,_> serverInfo serviceName param func.Invoke
    /// <summary>
    /// Stopping Service on a group of remote nodes.
    /// </summary>
    static member Stop (cl:Cluster, serviceName:string) =
        Prajna.Service.RemoteInstance.InternalStopInstanceOnCluster cl serviceName

    /// <summary>
    /// Stopping Service on a group of remote nodes.
    /// </summary>
    static member Stop serviceName =
        Prajna.Service.RemoteInstance.InternalStopInstance serviceName

    /// Stopping services on a set of servers
    static member Stop (serverInfo, serviceName ) =
        Prajna.Service.RemoteInstance.InternalStopInstanceOnServers serverInfo serviceName
